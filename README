# TodoListe

Une application de gestion de tâches (Todo List) développée en React avec TypeScript et Vite.  
Le backend sera ajouté ultérieurement.

## Fonctionnalités

- Affichage de la liste des tâches
- Ajout d’une nouvelle tâche
- Suppression d’une tâche
- Mise à jour du statut d’une tâche (en attente / terminée)
- Gestion des erreurs d’API côté frontend

## Structure du projet

```
frontend/
  src/
    components/      # Composants React (TaskForm, TaskItem, TaskList)
    services/        # Appels à l’API (api.ts)
    types/           # Types TypeScript (Task.ts)
    App.tsx          # Composant principal
    main.tsx         # Point d’entrée de l’application
    App.css          # Styles principaux
public/
backend/             # (à venir)
```

## Installation

1. **Cloner le dépôt**

   ```sh
   git clone <url-du-repo>
   cd todoListe
   ```

2. **Installer les dépendances**

   ```sh
   npm install
   ```

3. **Lancer le projet en développement**
   ```sh
   npm run dev
   ```
4. **Accéder à l’application**  
   Ouvre [http://localhost:5173](http://localhost:5173) dans ton navigateur.

## Scripts utiles

- `npm run dev` : Démarre le serveur de développement Vite
- `npm run build` : Build du projet pour la production
- `npm run preview` : Prévisualisation du build
- `npm run lint` : Lint du code avec ESLint

## Technologies utilisées

- [React](https://react.dev/)
- [TypeScript](https://www.typescriptlang.org/)
- [Vite](https://vitejs.dev/)
- [Axios](https://axios-http.com/)

## Backend

Backend

Le backend est développé en Node.js, Express et TypeScript avec validation des données via Zod.
Il fournit une API REST pour la gestion des tâches.

Fonctionnalités

Récupération de toutes les tâches

Création d’une nouvelle tâche

Suppression d’une tâche

Validation des données avec Zod

Types partagés entre frontend et backend

## Installation

Se placer dans le dossier backend

cd backend

## Installer les dépendances

npm install

## Lancer le serveur en développement

npm run dev

## Accéder à l’API

Le serveur est disponible sur http://localhost:3001/api
.

## Scripts utiles

- `npm run dev` : Démarre le serveur en développement avec ts-node-dev

- `npm run build` : Compile le projet en JavaScript

- `npm start `: Lance le serveur compilé

## Endpoints API

GET /api/tasks : Récupérer toutes les tâches

POST /api/tasks : Créer une nouvelle tâche

DELETE /api/tasks/:id : Supprimer une tâche

---
